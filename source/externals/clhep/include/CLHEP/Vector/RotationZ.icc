// -*- C++ -*-
// ---------------------------------------------------------------------------
//
// This file is a part of the CLHEP - a Class Library for High Energy Physics.
// 
// This is the definitions of the inline member functions of the
// HepRotationZ class
//

#include <cmath>
#include "CLHEP/Units/PhysicalConstants.h"

namespace CLHEP {

inline G4double HepRotationZ::xx() const { return its_c; }
inline G4double HepRotationZ::xy() const { return -its_s; }
inline G4double HepRotationZ::yx() const { return its_s; }
inline G4double HepRotationZ::yy() const { return its_c; }

inline G4double HepRotationZ::zz() const { return 1.0; }
inline G4double HepRotationZ::zy() const { return 0.0; }
inline G4double HepRotationZ::zx() const { return 0.0; }
inline G4double HepRotationZ::yz() const { return 0.0; }
inline G4double HepRotationZ::xz() const { return 0.0; }

inline HepRep3x3 HepRotationZ::rep3x3() const {
  return HepRep3x3 ( its_c, -its_s,  0.0,
                     its_s,  its_c,  0.0,
                       0.0,    0.0,  1.0  );
}

inline HepRotationZ::HepRotationZ() : its_d(0.0), its_s(0.0), its_c(1.0) {}

inline HepRotationZ::HepRotationZ(const HepRotationZ & orig) : 
	its_d(orig.its_d), its_s(orig.its_s), its_c(orig.its_c)
{}

inline HepRotationZ::HepRotationZ(G4double dd, G4double ss, G4double cc) :
	its_d(dd), its_s(ss), its_c(cc)
{}

inline HepRotationZ & HepRotationZ::operator= (const HepRotationZ & orig) {
  its_d = orig.its_d;
  its_s = orig.its_s; 
  its_c = orig.its_c;
  return *this;
}

inline HepRotationZ::~HepRotationZ() {}

inline Hep3Vector HepRotationZ::colX() const 
				{ return Hep3Vector (  its_c,   its_s,  0.0 ); }
inline Hep3Vector HepRotationZ::colY() const 
				{ return Hep3Vector ( -its_s,   its_c,  0.0 ); }
inline Hep3Vector HepRotationZ::colZ() const 
				{ return Hep3Vector ( 0.0, 0.0, 1.0 ); }
 
inline Hep3Vector HepRotationZ::rowX() const 
				{ return Hep3Vector (  its_c,  -its_s,  0.0 ); }
inline Hep3Vector HepRotationZ::rowY() const 
				{ return Hep3Vector (  its_s,   its_c,  0.0 ); }
inline Hep3Vector HepRotationZ::rowZ() const 
				{ return Hep3Vector ( 0.0, 0.0, 1.0 ); }

inline G4double  HepRotationZ::getPhi  () const { return phi();   }
inline G4double  HepRotationZ::getTheta() const { return theta(); }
inline G4double  HepRotationZ::getPsi  () const { return psi();   }
inline G4double  HepRotationZ::getDelta() const { return its_d; }
inline Hep3Vector HepRotationZ::getAxis () const { return axis();  }

inline G4double  HepRotationZ::delta() const { return its_d; }
inline Hep3Vector HepRotationZ::axis() const { return Hep3Vector(0,0,1); }

inline HepAxisAngle HepRotationZ::axisAngle() const {
  return HepAxisAngle ( axis(), delta() );
}

inline void HepRotationZ::getAngleAxis
			(G4double & ddelta, Hep3Vector & aaxis) const {
  ddelta = its_d;
  aaxis  = getAxis();
}

inline bool HepRotationZ::isIdentity() const {
  return ( its_d==0 );
}

inline int HepRotationZ::compare ( const HepRotationZ & r  ) const {
  if (its_d > r.its_d) return 1; else if (its_d < r.its_d) return -1; else return 0;
}

inline bool HepRotationZ::operator==(const HepRotationZ & r) const
  { return (its_d==r.its_d); }
inline bool HepRotationZ::operator!=(const HepRotationZ & r) const
  { return (its_d!=r.its_d); }
inline bool HepRotationZ::operator>=(const HepRotationZ & r) const
  { return (its_d>=r.its_d); }
inline bool HepRotationZ::operator<=(const HepRotationZ & r) const
  { return (its_d<=r.its_d); }
inline bool HepRotationZ::operator> (const HepRotationZ & r) const
  { return (its_d> r.its_d); }
inline bool HepRotationZ::operator< (const HepRotationZ & r) const
  { return (its_d< r.its_d); }

inline void HepRotationZ::rectify() { 
  its_d = proper(its_d);  // Just in case!
  its_s = std::sin(its_d);
  its_c = std::cos(its_d);
} 

inline Hep3Vector HepRotationZ::operator() (const Hep3Vector & p) const {
  G4double x = p.x();
  G4double y = p.y();
  G4double z = p.z();
  return  Hep3Vector(  x * its_c - y * its_s,
                       x * its_s + y * its_c,
                             z        );
}

inline Hep3Vector HepRotationZ::operator * (const Hep3Vector & p) const {
  return operator()(p);
}

inline HepLorentzVector HepRotationZ::operator()
			( const HepLorentzVector & w ) const {
  return  HepLorentzVector( operator() (w.vect()) , w.t() );
}

inline HepLorentzVector HepRotationZ::operator * 
                                        (const HepLorentzVector & p) const {
  return operator()(p);
}

inline HepRotationZ & HepRotationZ::operator *= (const HepRotationZ & m1) {
  return *this = (*this) * (m1);
}

inline HepRotationZ & HepRotationZ::transform(const HepRotationZ & m1) {
  return *this = m1 * (*this);
}

inline G4double HepRotationZ::proper( G4double ddelta ) {
  // -PI < its_d <= PI
  if ( std::fabs(ddelta) < CLHEP::pi ) {
    return  ddelta;
  } else {
    G4double x = ddelta / (CLHEP::twopi);
    return  (CLHEP::twopi) * ( x + std::floor(.5-x) );
  }
}  // proper()

inline HepRotationZ HepRotationZ::operator * ( const HepRotationZ & rz ) const {
  return HepRotationZ ( HepRotationZ::proper(its_d+rz.its_d),
                        its_s*rz.its_c + its_c*rz.its_s,
                        its_c*rz.its_c - its_s*rz.its_s );
}

inline HepRotationZ HepRotationZ::inverse() const {
  return HepRotationZ( proper(-its_d), -its_s, its_c ); 
}

inline HepRotationZ inverseOf(const HepRotationZ & r) {
  return r.inverse();
}

inline HepRotationZ & HepRotationZ::invert() {
  return *this=inverse();
}

inline HepLorentzVector HepRotationZ::col1() const
                                { return HepLorentzVector (colX(), 0); }
inline HepLorentzVector HepRotationZ::col2() const
                                { return HepLorentzVector (colY(), 0); }
inline HepLorentzVector HepRotationZ::col3() const
                                { return HepLorentzVector (colZ(), 0); }
inline HepLorentzVector HepRotationZ::col4() const
                                { return HepLorentzVector (0,0,0,1); }
inline HepLorentzVector HepRotationZ::row1() const
                                { return HepLorentzVector (rowX(), 0); }
inline HepLorentzVector HepRotationZ::row2() const
                                { return HepLorentzVector (rowY(), 0); }
inline HepLorentzVector HepRotationZ::row3() const
                                { return HepLorentzVector (rowZ(), 0); }
inline HepLorentzVector HepRotationZ::row4() const
                                { return HepLorentzVector (0,0,0,1); }
inline G4double HepRotationZ::xt() const { return 0.0; }
inline G4double HepRotationZ::yt() const { return 0.0; }
inline G4double HepRotationZ::zt() const { return 0.0; }
inline G4double HepRotationZ::tx() const { return 0.0; }
inline G4double HepRotationZ::ty() const { return 0.0; }
inline G4double HepRotationZ::tz() const { return 0.0; }
inline G4double HepRotationZ::tt() const { return 1.0; }

inline HepRep4x4 HepRotationZ::rep4x4() const {
  return HepRep4x4 (  its_c, -its_s, 0.0, 0.0, 
                      its_s,  its_c, 0.0, 0.0, 
                        0.0,    0.0, 1.0, 0.0,
                        0.0,    0.0, 0.0, 1.0 );
}

inline G4double HepRotationZ::getTolerance() {
  return Hep4RotationInterface::tolerance;
}
inline G4double HepRotationZ::setTolerance(G4double tol) {
  return Hep4RotationInterface::setTolerance(tol);
}

}  // namespace CLHEP
