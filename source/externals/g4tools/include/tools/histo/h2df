// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file tools.license for terms.

#ifndef tools_histo_h2df
#define tools_histo_h2df

// coord is in G4double.
// weight is in G4float.

#include "h2"

namespace tools {
namespace histo {

class h2df : public h2<G4double,unsigned int,unsigned int,G4float,G4float> {
  typedef h2<G4double,unsigned int,unsigned int,G4float,G4float> parent;
public:
  static const std::string& s_class() {
    static const std::string s_v("tools::histo::h2df");
    return s_v;
  }
  const std::string& s_cls() const {return s_class();}
public:
  h2df():parent("",10,0,1,10,0,1){} //for I/O when reading.

  h2df(const std::string& a_title,
      unsigned int aXnumber,G4float aXmin,G4float aXmax,
      unsigned int aYnumber,G4float aYmin,G4float aYmax)
  :parent(a_title,aXnumber,aXmin,aXmax,aYnumber,aYmin,aYmax)
  {}
  h2df(const std::string& a_title,
      const std::vector<G4double>& a_edges_x,
      const std::vector<G4double>& a_edges_y)
  :parent(a_title,a_edges_x,a_edges_y)
  {}

  virtual ~h2df(){}
public:
  h2df(const h2df& a_from):parent(a_from){}
  h2df& operator=(const h2df& a_from){
    parent::operator=(a_from);
    return *this;
  }

private:static void check_instantiation() {h2df dummy("",10,0,1,10,0,1);}
};

}}

#endif




