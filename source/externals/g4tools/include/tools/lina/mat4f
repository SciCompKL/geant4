// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file tools.license for terms.

#ifndef tools_mat4f
#define tools_mat4f

#include "mat4"
#include <cmath>

namespace tools {

class mat4f : public mat4<G4float> {
  typedef mat4<G4float> parent;
public:
  mat4f(){}
  virtual ~mat4f() {}
public:
  mat4f(const mat4f& a_from):parent(a_from){}
  mat4f& operator=(const mat4f& a_from){
    parent::operator=(a_from);
    return *this;
  }
public:
  mat4f(G4float a_00,G4float a_01,G4float a_02,G4float a_03, //first  row
        G4float a_10,G4float a_11,G4float a_12,G4float a_13, //second row
        G4float a_20,G4float a_21,G4float a_22,G4float a_23, //third  row
        G4float a_30,G4float a_31,G4float a_32,G4float a_33) //fourth row
  :parent(a_00,a_01,a_02,a_03,
          a_10,a_11,a_12,a_13,
          a_20,a_21,a_22,a_23,
          a_30,a_31,a_32,a_33)
  {}
  mat4f(const parent& a_from):parent(a_from){}
  mat4f& operator=(const parent& a_from){
    parent::operator=(a_from);
    return *this;
  }
public:
  void set_rotate(const G4float& a_x,const G4float& a_y,const G4float& a_z,const G4float& a_angle) {
    //WARNING : (a_x,a_y,a_z) must be a normalized vector.
    parent::set_rotate(a_x,a_y,a_z,a_angle,::sinf,::cosf);
  }
  void mul_rotate(const G4float& a_x,const G4float& a_y,const G4float& a_z,const G4float& a_angle) {
    parent::mul_rotate(a_x,a_y,a_z,a_angle,::sinf,::cosf);
  }
  void left_mul_rotate(const G4float& a_x,const G4float& a_y,const G4float& a_z,const G4float& a_angle) {
    parent::left_mul_rotate(a_x,a_y,a_z,a_angle,::sinf,::cosf);
  }

  template <class VEC>
  void set_rotate(const VEC& a_dir,G4float a_angle) {
    //WARNING : a_dir must be a normalized vector.
    parent::set_rotate(a_dir[0],a_dir[1],a_dir[2],a_angle,::sinf,::cosf);
  }

public: //backward compatibility
  void mul_2f(G4float& a_x,G4float& a_y) const {parent::mul_2(a_x,a_y);}
  void mul_3f(G4float& a_x,G4float& a_y,G4float& a_z) const {parent::mul_3(a_x,a_y,a_z);}
  void mul_dir_3f(G4float& a_x,G4float& a_y,G4float& a_z) const {parent::mul_dir_3(a_x,a_y,a_z);}
  void mul_trans_3f(G4float& a_x,G4float& a_y,G4float& a_z) const {parent::mul_trans_3(a_x,a_y,a_z);}
  void mul_4f(G4float& a_x,G4float& a_y,G4float& a_z,G4float& a_w) const {parent::mul_4(a_x,a_y,a_z,a_w);}
  void mul_dir_3d(G4double& a_x,G4double& a_y,G4double& a_z) const { //used in sg::healpix
    G4float x = G4float(a_x);
    G4float y = G4float(a_y);
    G4float z = G4float(a_z);
    parent::mul_dir_3(x,y,z);
    a_x = x;a_y = y;a_z = z;
  }
public: //operators
};

// for sf_vec<mat4f,G4float>, sf_mat4f :
inline const std::string& stype(const mat4f&) {
  static const std::string s_v("tools::mat4f");
  return s_v;
}

}

#endif
